void EnableInterrupts(void){};
void WaitForInterrupt(void){}; 
uint8_t cflag = 0;
void init_portF()
{
	SYSCTL_RCGCGPIO_R |= 0x00000020; //init clock reg
	delay(50);
	GPIO_PORTF_LOCK_R = 0x4C4F434B;
	GPIO_PORTF_CR_R = 0x1F; // FOR ALL PINS I USE
	delay(50);
	/* make the Switches as input and Leds are output*/
	GPIO_PORTF_AFSEL_R = 0x00 ; // neednt
	GPIO_PORTF_PCTL_R = 0x00000000 ; //neednt
	GPIO_PORTF_AMSEL_R = 0x00 ; //neednt
	
	//Now we set the Directions/
	GPIO_PORTF_DIR_R = 0x0E; // 
	GPIO_PORTF_DEN_R = 0x1F;//
	GPIO_PORTF_PUR_R = 0x11; // FOR THE SWITCHES AT PIN 0 AND 4
	// INTERRUPT INITIALIZATION
  // negative edge triggered (falling) configuration
  GPIO_PORTF_IS_R &= ~0x10;  //edge sensitive interrupt
  GPIO_PORTF_IBE_R &= ~0x10; //single edge
  GPIO_PORTF_IEV_R &= ~0x10; //falling edge
  GPIO_PORTF_ICR_R |= 0x10;  //clear interrupt signal of PF4 (switch)
  GPIO_PORTF_IM_R |= 0x10;   // arm interrupt on PF4 (switch)

  // setting Port F priority (setting priority to 2)
  NVIC_PRI7_R = (NVIC_PRI7_R & 0xFF00FFFF) | 0x00400000;
  NVIC_EN0_R |= (1 << 30); // enable IRQ from Port F (bit 30 of EN0 register)
  EnableInterrupts(); //enable interrupts
	
}
void GPIOF_Handler(double x,double y)
{
  GPIO_PORTF_ICR_R |= 0x10; //clear interrupt signal of PF4 (switch)
  //what to do
  cflag = 1 ;
}
